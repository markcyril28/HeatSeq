# Load the package
library(pkg, character.only = TRUE)
#!/usr/bin/env Rscript
# ===============================================
# Package Installation and Loading
# ===============================================
# Function to install and load packages
install_and_load <- function(packages) {
for (pkg in packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
cat("Installing package:", pkg, "\n")
# Check if it's a Bioconductor package
if (pkg %in% c("DESeq2", "edgeR", "limma", "GenomicFeatures", "GenomicAlignments")) {
# Install BiocManager if not available
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager", repos = "https://cran.r-project.org/")
}
BiocManager::install(pkg, ask = FALSE, update = FALSE)
} else {
# Regular CRAN package
install.packages(pkg, repos = "https://cran.r-project.org/")
}
}
# Load the package
library(pkg, character.only = TRUE)
cat("âœ“ Loaded:", pkg, "\n")
}
}
# Define required packages
required_packages <- c(
"tidyverse",    # Data manipulation and visualization
"DESeq2",       # Differential expression analysis
"pheatmap",     # Heatmap generation
"RColorBrewer", # Color palettes
"viridis"       # Color palettes
)
cat("Checking and installing required packages...\n")
cat("Required packages:", paste(required_packages, collapse = ", "), "\n\n")
# Install and load packages
install_and_load(required_packages)
cat("\nâœ“ All packages loaded successfully!\n\n")
# ===============================================
# Libraries (now redundant but kept for compatibility)
# ===============================================
suppressPackageStartupMessages({
library(tidyverse)
library(DESeq2)
library(pheatmap)
library(RColorBrewer)
library(viridis)
})
# ===============================================
# Configuration
# ===============================================
count_dir <- "5_stringtie/method_2.2_count_matrices"   # <-- output of bash script
out_dir   <- "6_Visualization/heatmaps_method_2.2"
# ===============================================
# Clean Output Directory
# ===============================================
cat("Cleaning output directory...\n")
# Check if output directory exists and clean it
if (dir.exists(out_dir)) {
# Get list of files in the output directory
existing_files <- list.files(out_dir, full.names = TRUE, recursive = TRUE)
if (length(existing_files) > 0) {
cat("Found", length(existing_files), "existing files in output directory\n")
cat("Removing old files...\n")
# Remove all files and subdirectories
unlink(existing_files, recursive = TRUE, force = TRUE)
# Also remove any empty subdirectories
subdirs <- list.dirs(out_dir, full.names = TRUE, recursive = TRUE)
subdirs <- subdirs[subdirs != out_dir]  # Exclude the main directory
if (length(subdirs) > 0) {
unlink(subdirs, recursive = TRUE, force = TRUE)
}
cat("âœ“ Output directory cleaned successfully\n")
} else {
cat("Output directory is already empty\n")
}
} else {
cat("Output directory does not exist yet\n")
}
# Create/recreate the output directory
dir.create(out_dir, showWarnings = FALSE, recursive = TRUE)
cat("âœ“ Output directory ready:", out_dir, "\n\n")
# ===============================================
# Helper function
# ===============================================
process_group <- function(file) {
# Extract group name from filename (removes _counts.tsv suffix)
group_name <- gsub("_counts\.tsv$", "", basename(file))
#!/usr/bin/env Rscript
# ===============================================
# Package Installation and Loading
# ===============================================
# Function to install and load packages
install_and_load <- function(packages) {
for (pkg in packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
cat("Installing package:", pkg, "\n")
# Check if it's a Bioconductor package
if (pkg %in% c("DESeq2", "edgeR", "limma", "GenomicFeatures", "GenomicAlignments")) {
# Install BiocManager if not available
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager", repos = "https://cran.r-project.org/")
}
BiocManager::install(pkg, ask = FALSE, update = FALSE)
} else {
# Regular CRAN package
install.packages(pkg, repos = "https://cran.r-project.org/")
}
}
# Load the package with conflict handling for tidyverse
if (pkg == "tidyverse") {
suppressMessages(suppressWarnings(library(pkg, character.only = TRUE)))
cat("âœ“ Loaded:", pkg, "(function conflicts handled)\n")
} else {
library(pkg, character.only = TRUE)
cat("âœ“ Loaded:", pkg, "\n")
}
}
}
# Define required packages
required_packages <- c(
"tidyverse",    # Data manipulation and visualization
"DESeq2",       # Differential expression analysis
"pheatmap",     # Heatmap generation
"RColorBrewer", # Color palettes
"viridis"       # Color palettes
)
cat("Checking and installing required packages...\n")
cat("Required packages:", paste(required_packages, collapse = ", "), "\n\n")
# Install and load packages
install_and_load(required_packages)
# Handle function conflicts explicitly
cat("\nðŸ“‹ Resolving function conflicts...\n")
cat("   â€¢ dplyr::filter() will be used instead of stats::filter()\n")
cat("   â€¢ dplyr::lag() will be used instead of stats::lag()\n")
cat("   â€¢ Use stats::filter() or stats::lag() explicitly if base R functions needed\n")
cat("\nâœ“ All packages loaded successfully!\n\n")
# ===============================================
# Libraries (redundant loading with conflict suppression)
# ===============================================
suppressPackageStartupMessages({
suppressMessages(suppressWarnings(library(tidyverse)))
library(DESeq2)
library(pheatmap)
library(RColorBrewer)
library(viridis)
})
# ===============================================
# Configuration
# ===============================================
count_dir <- "5_stringtie/method_2.2_count_matrices"   # <-- output of bash script
out_dir   <- "6_Visualization/heatmaps_method_2.2"
# ===============================================
# Clean Output Directory
# ===============================================
cat("Cleaning output directory...\n")
# Check if output directory exists and clean it
if (dir.exists(out_dir)) {
# Get list of files in the output directory
existing_files <- list.files(out_dir, full.names = TRUE, recursive = TRUE)
if (length(existing_files) > 0) {
cat("Found", length(existing_files), "existing files in output directory\n")
cat("Removing old files...\n")
# Remove all files and subdirectories
unlink(existing_files, recursive = TRUE, force = TRUE)
# Also remove any empty subdirectories
subdirs <- list.dirs(out_dir, full.names = TRUE, recursive = TRUE)
subdirs <- subdirs[subdirs != out_dir]  # Exclude the main directory
if (length(subdirs) > 0) {
unlink(subdirs, recursive = TRUE, force = TRUE)
}
cat("âœ“ Output directory cleaned successfully\n")
} else {
cat("Output directory is already empty\n")
}
} else {
cat("Output directory does not exist yet\n")
}
# Create/recreate the output directory
dir.create(out_dir, showWarnings = FALSE, recursive = TRUE)
cat("âœ“ Output directory ready:", out_dir, "\n\n")
# ===============================================
# Helper function
# ===============================================
process_group <- function(file) {
# Extract group name from filename (removes _counts.tsv suffix)
group_name <- gsub("_counts\.tsv$", "", basename(file))
#!/usr/bin/env Rscript
# ===============================================
# Package Installation and Loading
# ===============================================
# Function to install and load packages
install_and_load <- function(packages) {
for (pkg in packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
cat("Installing package:", pkg, "\n")
# Check if it's a Bioconductor package
if (pkg %in% c("DESeq2", "edgeR", "limma", "GenomicFeatures", "GenomicAlignments")) {
# Install BiocManager if not available
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager", repos = "https://cran.r-project.org/")
}
BiocManager::install(pkg, ask = FALSE, update = FALSE)
} else {
# Regular CRAN package
install.packages(pkg, repos = "https://cran.r-project.org/")
}
}
# Load the package with conflict handling for tidyverse
if (pkg == "tidyverse") {
suppressMessages(suppressWarnings(library(pkg, character.only = TRUE)))
cat("âœ“ Loaded:", pkg, "(function conflicts handled)\n")
} else {
library(pkg, character.only = TRUE)
cat("âœ“ Loaded:", pkg, "\n")
}
}
}
# Define required packages
required_packages <- c(
"tidyverse",    # Data manipulation and visualization
"DESeq2",       # Differential expression analysis
"pheatmap",     # Heatmap generation
"RColorBrewer", # Color palettes
"viridis"       # Color palettes
)
cat("Checking and installing required packages...\n")
cat("Required packages:", paste(required_packages, collapse = ", "), "\n\n")
# Install and load packages
install_and_load(required_packages)
# Handle function conflicts explicitly
cat("\nðŸ“‹ Resolving function conflicts...\n")
cat("   â€¢ dplyr::filter() will be used instead of stats::filter()\n")
cat("   â€¢ dplyr::lag() will be used instead of stats::lag()\n")
cat("   â€¢ Use stats::filter() or stats::lag() explicitly if base R functions needed\n")
cat("\nâœ“ All packages loaded successfully!\n\n")
# ===============================================
# Libraries (redundant loading with conflict suppression)
# ===============================================
suppressPackageStartupMessages({
suppressMessages(suppressWarnings(library(tidyverse)))
library(DESeq2)
library(pheatmap)
library(RColorBrewer)
library(viridis)
})
# ===============================================
# Configuration
# ===============================================
count_dir <- "5_stringtie/method_2.2_count_matrices"   # <-- output of bash script
out_dir   <- "6_Visualization/heatmaps_method_2.2"
# ===============================================
# Clean Output Directory
# ===============================================
cat("Cleaning output directory...\n")
# Check if output directory exists and clean it
if (dir.exists(out_dir)) {
# Get list of files in the output directory
existing_files <- list.files(out_dir, full.names = TRUE, recursive = TRUE)
if (length(existing_files) > 0) {
cat("Found", length(existing_files), "existing files in output directory\n")
cat("Removing old files...\n")
# Remove all files and subdirectories
unlink(existing_files, recursive = TRUE, force = TRUE)
# Also remove any empty subdirectories
subdirs <- list.dirs(out_dir, full.names = TRUE, recursive = TRUE)
subdirs <- subdirs[subdirs != out_dir]  # Exclude the main directory
if (length(subdirs) > 0) {
unlink(subdirs, recursive = TRUE, force = TRUE)
}
cat("âœ“ Output directory cleaned successfully\n")
} else {
cat("Output directory is already empty\n")
}
} else {
cat("Output directory does not exist yet\n")
}
# Create/recreate the output directory
dir.create(out_dir, showWarnings = FALSE, recursive = TRUE)
cat("âœ“ Output directory ready:", out_dir, "\n\n")
# ===============================================
# Helper function
# ===============================================
process_group <- function(file) {
# Extract group name from filename (removes _counts.tsv suffix)
group_name <- gsub("_counts\.tsv$", "", basename(file))
